proxy-groups:
  # 手动选择组（包含所有节点，不含地区分组）
  - icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Static.png
    include-all: true
    exclude-filter: (?i)GB|Traffic|Expire|Premium|频道|订阅|ISP|流量|到期|重置
    name: 手动选择
    type: select
    proxies:
      - 美国自动
      - 俄罗斯自动
      - 国外代理
      - 国内直连

  # 地区分组 - 美国自动测速
  - icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png
    include-all: true
    exclude-filter: (?i)GB|Traffic|Expire|Premium|频道|订阅|ISP|流量|到期|重置
    filter: (?i)美国|USA|United States|US|🇺🇸
    name: 美国自动
    type: url-test
    interval: 300
    tolerance: 50

  # 地区分组 - 俄罗斯自动测速
  - icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Russia.png
    include-all: true
    exclude-filter: (?i)GB|Traffic|Expire|Premium|频道|订阅|ISP|流量|到期|重置
    filter: (?i)俄罗斯|Russia|RU|🇷🇺
    name: 俄罗斯自动
    type: url-test
    interval: 300
    tolerance: 50

  # 国外代理组
  - icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Global.png
    name: 国外代理
    type: select
    proxies:
      - 美国自动
      - 俄罗斯自动
      - 手动选择

  # 国内直连组
  - icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png
    name: 国内直连
    type: select
    proxies:
      - DIRECT
      - 手动选择

  # YouTube专用组（默认俄罗斯）
  - icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube.png
    name: YouTube
    type: select
    proxies:
      - 俄罗斯自动
      - 美国自动
      - 国外代理
      - 手动选择

rule-providers:
  # 基础规则
  private:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/private.yaml
    path: ./ruleset/private.yaml
    behavior: domain
    interval: 86400
    format: yaml
    type: http

  cn_domain:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/cn.yaml
    path: ./ruleset/cn_domain.yaml
    behavior: domain
    interval: 86400
    format: yaml
    type: http

  cn_ip:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/cn.yaml
    path: ./ruleset/cn_ip.yaml
    behavior: ipcidr
    interval: 86400
    format: yaml
    type: http

  # YouTube规则
  youtube:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/YouTube/YouTube.yaml
    path: ./ruleset/youtube.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  # 流媒体服务
  netflix:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Netflix/Netflix.yaml
    path: ./ruleset/netflix.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  disney:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Disney/Disney.yaml
    path: ./ruleset/disney.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  spotify:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Spotify/Spotify.yaml
    path: ./ruleset/spotify.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  tiktok:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/TikTok/TikTok.yaml
    path: ./ruleset/tiktok.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  # 科技公司
  microsoft:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Microsoft/Microsoft.yaml
    path: ./ruleset/microsoft.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  github:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml
    path: ./ruleset/github.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  apple:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Apple/Apple.yaml
    path: ./ruleset/apple.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  google_domain:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/google.yaml
    path: ./ruleset/google_domain.yaml
    behavior: domain
    interval: 86400
    format: yaml
    type: http

  google_ip:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/google.yaml
    path: ./ruleset/google_ip.yaml
    behavior: ipcidr
    interval: 86400
    format: yaml
    type: http

  # 社交通讯
  telegram_domain:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/telegram.yaml
    path: ./ruleset/telegram_domain.yaml
    behavior: domain
    interval: 86400
    format: yaml
    type: http

  telegram_ip:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/telegram.yaml
    path: ./ruleset/telegram_ip.yaml
    behavior: ipcidr
    interval: 86400
    format: yaml
    type: http

  twitter:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Twitter/Twitter.yaml
    path: ./ruleset/twitter.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  facebook:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Facebook/Facebook.yaml
    path: ./ruleset/facebook.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  # AI服务
  openai:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/OpenAI/OpenAI.yaml
    path: ./ruleset/openai.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  claude:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Claude/Claude.yaml
    path: ./ruleset/claude.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  bing:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Bing/Bing.yaml
    path: ./ruleset/bing.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  # 游戏平台
  steam:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Steam/Steam.yaml
    path: ./ruleset/steam.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  epicgames:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Epic/Epic.yaml
    path: ./ruleset/epicgames.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  # CloudFlare服务
  cloudflare:
    url: https://testingcf.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Cloudflare/Cloudflare.yaml
    path: ./ruleset/cloudflare.yaml
    behavior: classical
    interval: 86400
    format: yaml
    type: http

  # 兜底规则
  geolocation-!cn:
    url: https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/geolocation-!cn.yaml
    path: ./ruleset/geolocation-!cn.yaml
    behavior: domain
    interval: 86400
    format: yaml
    type: http

rules:
  # 基础规则 - 优先处理私有网络和国内流量
  - "RULE-SET,private,DIRECT"
  - "RULE-SET,cn_domain,国内直连"
  - "RULE-SET,cn_ip,国内直连"

  # YouTube专用规则（默认俄罗斯）
  - "RULE-SET,youtube,YouTube"

  # 流媒体服务
  - "RULE-SET,netflix,国外代理"
  - "RULE-SET,disney,国外代理"
  - "RULE-SET,spotify,国外代理"
  - "RULE-SET,tiktok,国外代理"

  # AI服务
  - "RULE-SET,openai,国外代理"
  - "RULE-SET,claude,国外代理"
  - "RULE-SET,bing,国外代理"

  # 科技公司
  - "RULE-SET,microsoft,国外代理"
  - "RULE-SET,github,国外代理"
  - "RULE-SET,apple,国外代理"
  - "RULE-SET,google_domain,国外代理"
  - "RULE-SET,google_ip,国外代理"

  # 社交通讯
  - "RULE-SET,telegram_domain,国外代理"
  - "RULE-SET,telegram_ip,国外代理"
  - "RULE-SET,twitter,国外代理"
  - "RULE-SET,facebook,国外代理"

  # 游戏平台
  - "RULE-SET,steam,国外代理"
  - "RULE-SET,epicgames,国外代理"

  # CloudFlare服务
  - "RULE-SET,cloudflare,国外代理"

  # 国外网站兜底规则
  - "RULE-SET,geolocation-!cn,国外代理"

  # 最终兜底规则
  - "MATCH,手动选择"